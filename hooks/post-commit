#!/bin/bash
#	hooks/post-commit  3.329.796  2019-07-26T20:34:58.943940-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.328  
#	   testing 
#	hooks/post-commit  3.328.795  2019-07-26T20:34:03.765276-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.327  
#	   testing 
#	hooks/post-commit  3.327.794  2019-07-26T20:32:20.480942-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.326  
#	   testing 
#	hooks/post-commit  3.326.793  2019-07-26T20:30:57.366842-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.325  
#	   testing 
#	hooks/post-commit  3.325.792  2019-07-26T20:26:29.478105-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.324  
#	   testing 
#	hooks/post-commit  3.324.791  2019-07-26T20:25:19.218220-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.323  
#	   testing 
#	hooks/post-commit  3.323.790  2019-07-26T20:20:19.442319-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.322  
#	   testing 
#	hooks/post-commit  3.322.789  2019-07-26T20:19:21.948873-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.321  
#	   testing 
#	hooks/post-commit  3.321.788  2019-07-26T20:16:56.435510-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.320  
#	   testing format of file name 
#	hooks/post-commit  3.320.787  2019-07-26T19:58:47.273386-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.319  
#	   testing hooks pre-commit and post-commit #57 
#	hooks/post-commit  3.309.776  2019-07-26T15:15:00.108370-05:00 (CDT)  https://github.com/BradleyA/docker-security-infrastructure  uadmin  six-rpi3b.cptx86.com 3.308  
#	   determine how to parse FILE_LIST #57 
###
### production standard 3.0 shellcheck
### production standard 5.1.160 Copyright
#       Copyright (c) 2019 Bradley Allen
#       MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
### production standard 1.0 DEBUG variable
#       Order of precedence: environment variable, default code
if [ "${DEBUG}" == "" ] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
#       set -x
#       set -v
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
###

echo "GIT_AUTHOR_DATE >${GIT_AUTHOR_DATE}<"
echo "GIT_AUTHOR_NAME >${GIT_AUTHOR_NAME}<"
echo "GIT_AUTHOR_EMAIL >${GIT_AUTHOR_EMAIL}<"
echo "GIT_REFLOG_ACTION >${GIT_REFLOG_ACTION}<"
echo "GIT_INDEX_FILE >${GIT_INDEX_FILE}<"

echo "\$GIT_DIR >${GIT_DIR}<"
echo "\$(git rev-parse --git-dir) >$(git rev-parse --git-dir)<"
echo "\$(git rev-parse --show-toplevel) >$(git rev-parse --show-toplevel)<"

echo "pwd >$(pwd)<"

echo "GIT_WORK_TREE >${GIT_WORK_TREE}<"

hook="$(git rev-parse --git-path hooks/post-commit)"
echo "hook >${hook}<"

#       Date and time function ISO 8601
get_date_stamp() {
DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
TEMP=$(date +%Z)
DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#       Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

###
WORKING_DIRECTORY=$(git rev-parse --show-toplevel)
FILE_LIST=$(cat "${WORKING_DIRECTORY}"/hooks/FILE_LIST)

echo -e "\${FILE_LIST} >${FILE_LIST}<\n\n"

#	wrong ssh/check-user-ssh.sh/TEST
#       Mark each file
for FILE_NAME in ${FILE_LIST} ; do
	echo "\${FILE_NAME} >${FILE_NAME}<"
	TMP_FILE=$(echo ${FILE_NAME} | rev | cut -d '/' -f 1 | rev)
	echo "\${TMP_FILE} >${TMP_FILE}<"
	TMP_DIR=$(echo ${FILE_NAME} | cut -d '/' -f 1 )
	echo "\${TMP_DIR} >${TMP_DIR}<"
#	if [[ sed 's/\///' ]] ; then 
#		FILE_TMP=$(echo ${FILE_NAME} | rev | cut -d '/' -f 1 | rev)
#		echo "\${FILE_TMP} >${FILE_TMP}<"
#	fi
#		FILE_DIRECTORY=$(sed 's/
		get_date_stamp ; echo -e "${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${FILE_NAME}/TEST directory not found in ${WORKING_DIRECTORY} for ${GIT_AUTHOR_NAME} (${USER})."
	if [ -d ${FILE_NAME}/TEST ] ; then
		get_date_stamp ; echo -e "${DATE_STAMP} ${LOCALHOST} ${0}[$$] Located ${FILE_NAME}/TEST directory in ${WORKING_DIRECTORY} for ${GIT_AUTHOR_NAME} (${USER})."
		$(ls -l ${FILE_NAME}/TEST)
	fi
done
